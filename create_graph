#!/usr/bin/env python3
#

##################################################
# DV8 (c) Marcus Dillavou <line72@line72.net
#  https://github.com/line72/dv8
##################################################

# MIT License
#
# Copyright (c) 2017 Marcus Dillavou <line72@line72.net>
# https://github.com/line72/dv8
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

##################################################
#
# This is a simple script to read from the database
#  `poller.db` generated by the `start_poller`
#  script.
# This generates a pdf visualization based on the
#  graph type for each route.
#
##################################################

import sys
import argparse

import dv8.DeviationPlotter
import dv8.OnBoardPlotter

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('graph_type',
                        choices = ['deviation', 'onboard'],
                        help = 'The type of graph to create')
    parser.add_argument('-t', '--title',
                        help = 'Set the graph title',
                        action = 'store')
    parser.add_argument('-s', '--start-date',
                        help = 'The start date in YYYYMMDD format (20170523)',
                        action = 'store')
    parser.add_argument('-e', '--end-date',
                        help = 'The end date in YYYYMMDD format (20170523)',
                        action = 'store')
    
    args = parser.parse_args()
    
    graph_type = args.graph_type
    title = '%s - %s' % (args.title, graph_type)
    
    start_time = args.start_date
    end_time = args.end_date
    

    if graph_type == 'deviation':
        plotter = dv8.DeviationPlotter.DeviationPlotter(title, start_time, end_time)
        plotter.go()
    elif graph_type == 'onboard':
        plotter = dv8.OnBoardPlotter.OnBoardPlotter(title, start_time, end_time)
        plotter.go()
    else:
        print('Invalid GRAPH type: %s' % graph_type);
        usage()



